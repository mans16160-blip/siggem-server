const fs = require('fs');
const http = require('http');
const https = require('https');
const app = require('../app');
const logger = require('../logger');

const ENV = process.env.NODE_ENV || 'development';
const HTTPS_PORT = normalizePort(process.env.HTTPS_PORT || '443');
const HTTP_PORT = normalizePort(process.env.HTTP_PORT || '80');


let useHttps = false;
let sslOptions = {};

if (ENV === 'production') {
  try {
    sslOptions = {
      key: fs.readFileSync('/etc/letsencrypt/live/siggemzenon.com/privkey.pem'),
      cert: fs.readFileSync('/etc/letsencrypt/live/siggemzenon.com/fullchain.pem')
    };
    useHttps = true;
    logger.info(' SSL certificates loaded, starting HTTPS server.');
  } catch (err) {
    logger.warn(' SSL certificates not found, falling back to HTTP.');
  }
}


const server = useHttps
  ? https.createServer(sslOptions, app)
  : http.createServer(app);

const port = useHttps ? HTTPS_PORT : HTTP_PORT;
app.set('port', port);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  switch (error.code) {
    case 'EACCES':
      logger.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      logger.error(`Unexpected error: ${error.message}`);
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  logger.info(`${useHttps ? 'HTTPS' : 'HTTP'} server is listening on ${bind}`);
}